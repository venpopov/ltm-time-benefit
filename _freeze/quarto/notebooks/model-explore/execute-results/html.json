{
  "hash": "f78c1783bfa3ac5b41e9bdd6caa9c3a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring model predictions\"\nformat: html\ndate: 05/20/2024\ndate-modified: last-modified\nfilters:\n  - shinylive\n---\n\n\n\n\n\n## Overview\n\nThe motivation for the paper was based on the assumption that the resource model should predict an interaction between the proactive benefits of free time and chunking:\n\n> \"If the LTM benefit arises because encoding a chunk consumes less of an encoding resource, then that benefit should diminish with longer free time, because over time the resource grows back towards its maximal level regardless of how much of it has been consumed by encoding the initial triplet of letters. \"\n\nAs we discussed, I was not sure if the model actually predicts this. Exploring the model's predictions for the *memory strength* latent variable reveals that this is not what the model predicts. As long as resources have not recovered to their maximum level, the model predicts only *additive* effects of chunking and free time.\n\n## An example\n\nThe plot below shows the predicted recall probability (top panels) and memory strength (bottom panels) as a function of the gap between the presentation of the first and second triplet of letters. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(targets)\ntar_source()\ntar_load(\"exp3_data_agg\")\n\nplot_predictions <- function(params, data) {\n  class(params) <- \"serial_recall_pars\"\n  data |>\n    mutate(\n      Probability = predict(params, data, group_by = c(\"gap\", \"chunk\")),\n      Strength = predict(params, data, group_by = c(\"gap\", \"chunk\"), type = \"strength\")\n    ) |>\n    pivot_longer(c(Probability, Strength), names_to = \"type\", values_to = \"value\") |>\n    ggplot(aes(gap, value, color = chunk, group = chunk)) +\n    geom_line() +\n    scale_color_discrete(\"1st chunk LTM?\") +\n    facet_grid(type~itemtype, scales = \"free\") +\n    theme_test(base_size = 14)\n}\n\nparams <- c(prop = 0.4, prop_ltm = 0.55, tau = 0.25, gain = 25, rate = 0.05)\nplot_predictions(params, exp3_data_agg)\n```\n\n::: {.cell-output-display}\n![](model-explore_files/figure-html/unnamed-chunk-1-1.png){width=816}\n:::\n:::\n\n\n\n\n\nLook first at the bottom panels showing raw memory strength. The lines are exactly parallel until a gap ~ 4500 ms. At that point the model has recovered all the resources consumed by encoding the *chunked* first triplet of letters. An interaction only occurs after this, because there are still resources left to recover from encoding the *random* first triplet of letters.\n\nIn contrast, we see an interaction in the predicted *recall probability* (top panels) because the model predicts a sigmoidal relationship between memory strength and recall probability. This is a consequence of the logistic function used to map memory strength to recall probability. And as you can see, the interaction actually goes in the opposite direction when performance is low in the third tripplet.\n\n## The math\n\nWe didn't need a simulation to tell us - we should have done simple math with the model a long time ago. Assuming no upper limit for simplicity, here is the predicted memory strength for the second tripplet: \n\n  | Chunk type | Gap | Memory strength |\n  |------------|-----|-----------------|\n  | random | shortgap | $p \\cdot (1-p + r \\cdot t_{short})$ |\n  | known | shortgap | $p \\cdot (1-p \\cdot p_{ltm} + r \\cdot t_{short})$ |\n  | random | longgap | $p \\cdot (1-p + r \\cdot t_{long})$ |\n  | known | longgap | $p \\cdot (1-p \\cdot p_{ltm} + r \\cdot t_{long})$ |\n\nTherefore the difference between known and random chunks separately for short and long gaps is the same:\n\n   - shortgap: $p^2 \\cdot (1 - p_{ltm})$\n   - longgap: $p^2 \\cdot (1 - p_{ltm})$\n\nbecause the terms $r \\cdot t_{short}$ and $r \\cdot t_{long}$ cancel out if resources have not fully recovered. This is why the model predicts only additive effects of chunking and free time.\n\nThe model does predict an interaction if resources recover fully before the second tripplet is presented. But this also means that there will be no primacy effect from the first to the second tripplet, which is not what we observe in the data.\n\nIn summary, the premise on which our introduction is currently built is not supported by the model.\n\n## An interactive shiny app\n\nI found it very useful to be able to quickly explore the model's predictions. I created a shiny app that allows you to explore the model's predictions for the proactive benefits of chunking and free time. You can use the sliders below to control the parameters of the model and see how the predicted probability of recall changes as a function of the conditions in the experiment.\n\n::: {.column-page-right}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 700\nlibrary(shiny)\nlibrary(shinylive)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# define functions\npred_prob <- function(\n    setsize, ISI = rep(0.5, setsize), item_in_ltm = rep(TRUE, setsize),\n    prop = 0.2, prop_ltm = 0.5, tau = 0.15, gain = 25, rate = 0.1,\n    r_max = 1, lambda = 1, growth = \"linear\", type = \"response\") {\n  R <- r_max\n  strengths <- vector(\"numeric\", length = setsize)\n  p_recall <- vector(\"numeric\", length = setsize)\n  prop_ltm <- ifelse(item_in_ltm, prop_ltm, 1)\n\n  for (item in 1:setsize) {\n    # strength of the item and recall probability\n    strengths[item] <- (prop * R)^lambda\n\n    # amount of resources consumed by the item\n    r_cost <- strengths[item]^(1 / lambda) * prop_ltm[item]\n    R <- R - r_cost\n\n    # recover resources\n    R <- switch(growth,\n      \"linear\" = min(r_max, R + rate * ISI[item]),\n      \"asy\" = R + (r_max - R) * (1 - exp(-rate * ISI[item]))\n    )\n  }\n\n  if (type == \"response\") {\n    1 / (1 + exp(-(strengths - tau) * gain))\n  } else {\n    strengths\n  }\n}\n\npredict_resmodel <- function(object, data, group_by, type = \"response\", ...) {\n  if (missing(group_by)) {\n    pred <- pred_prob(\n        setsize = nrow(data),\n        ISI = data$ISI,\n        item_in_ltm = data$item_in_ltm,\n        prop = object[\"prop\"],\n        prop_ltm = object[\"prop_ltm\"],\n        tau = object[\"tau\"],\n        gain = object[\"gain\"],\n        rate = object[\"rate\"],\n        type = type,\n        ...\n      )\n    return(pred)\n  }\n\n  by <- do.call(paste, c(data[, group_by], sep = \"_\"))\n  out <- lapply(split(data, by), function(x) {\n    x$pred_tmp_col295 <- predict_resmodel(object, x, type = type, ...)\n    x\n  })\n  out <- do.call(rbind, out)\n  out <- suppressMessages(dplyr::left_join(data, out))\n  out$pred_tmp_col295\n}\n\ndata <- expand.grid(chunk = c(\"known\", \"random\"),\n                    gap = seq(500, 6000, by = 225),\n                    itemtype = c(\"SP1-3\", \"SP4-6\", \"SP7-9\"))\n\ndata$ISI <- ifelse(data$itemtype == \"SP1-3\", data$gap/1000, 0.5)\ndata$item_in_ltm <- ifelse(data$itemtype == \"SP1-3\", data$chunk == \"known\", FALSE)                     \nshinyApp(\n  ui = fluidPage(\n    titlePanel(\"Interactive Plot\"),\n    sidebarLayout(\n      sidebarPanel(\n        sliderInput(\"prop\", \"prop:\", min = 0, max = 1, value = 0.2),\n        sliderInput(\"prop_ltm\", \"prop_ltm:\", min = 0, max = 1, value = 0.55),\n        sliderInput(\"rate\", \"rate:\", min = 0, max = 1, value = 0.02),\n        sliderInput(\"gain\", \"gain:\", min = 1, max = 100, value = 25),\n        sliderInput(\"tau\", \"tau:\", min = 0, max = 1, value = 0.14),\n      ),\n      mainPanel(\n        plotOutput(\"distPlot\")\n      )\n    )\n  ),\n  server = function(input, output) {\n    output$distPlot <- renderPlot({\n      par <- c(prop = input$prop, prop_ltm = input$prop_ltm, rate = input$rate, gain = input$gain, tau = input$tau)\n      data |>\n        # TODO: can I reuse the computation?\n        mutate(\n          Probability = predict_resmodel(par, data = data, group_by = c(\"gap\", \"chunk\")),\n          Strength = predict_resmodel(par, data = data, group_by = c(\"gap\", \"chunk\"), type = \"strength\")\n        ) |>\n        pivot_longer(c(Probability, Strength), names_to = \"type\", values_to = \"value\") |>\n        ggplot(aes(gap, value, color = chunk, group = chunk)) +\n        geom_line() +\n        scale_color_discrete(\"1st chunk LTM?\") +\n        facet_grid(type~itemtype, scales = \"free\") +\n        theme_classic(base_size = 14)\n    })\n  }\n)\n```\n\n:::\n\n## Why the best fitting model has a very low recovery?\n\nBoth in this experiment and in Mizrak & Oberauer (2022), the proactive benefit of time is global - it affects all subsequent items. With a couple of more simulations, we can see that the degree of local vs global benefit depends on the the `prop` depletion parameter. \n\n---\n\nWith very high `prop = 1`, the second tripplet will depelete all remaining resources, and then resources will be equivalent for all subsequent items. This is the most local benefit.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- c(prop = 1, prop_ltm = 0.7, tau = 0.15, gain = 5, rate = 0.1)\nplot_predictions(params, exp3_data_agg) + coord_cartesian(ylim = c(0, 1))\n```\n\n::: {.cell-output-display}\n![](model-explore_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n---\n\nWith very low `prop = 0.1`, the second tripplet will depelete only 10% of the *remaining resources*, and the proactive benefit will propagate to all subsequent items. This is the most global benefit.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- c(prop = 0.1, prop_ltm = 0.5, tau = 0.08, gain = 80, rate = 0.007)\nplot_predictions(params, exp3_data_agg) \n```\n\n::: {.cell-output-display}\n![](model-explore_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n---\n\nAnd with a middle range `prop = 0.5`, the second tripplet will depelete 50% of the *remaining resources*, and preserving some of the proactive benefit, but reducing it for subsequent items:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- c(prop = 0.6, prop_ltm = 0.5, tau = 0.3, gain = 10, rate = 0.05)\nplot_predictions(params, exp3_data_agg)\n```\n\n::: {.cell-output-display}\n![](model-explore_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### So what?\n\nsince we see mostly a global benefit in the data, in order for the model to fit well, it estimates a very low depletion rate (~ 0.2). But then to account for the primacy effect, and to prevent full recovery of resources between items with such low depletion, it also needs to estimate a very low recovery rate. Thus, all of our fits having slow recovery rates, are not related to accounting for the small interaction between chunking and free time, but rather to account for the global proactive benefits and primacy.\n",
    "supporting": [
      "model-explore_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}