{
  "hash": "4cfc2a995db2578e2c123d731580b046",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Untitled\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(targets)\ntar_source()\ntar_load(c(exp1_data_agg, exp2_data_agg))\n\nsubj_agg <- aggregate_by_subject() |>\n  filter(exp == \"Exp 1\")\n\nsubj_agg2 <- aggregate_by_subject() |>\n  filter(exp == \"Exp 2\")\n\nsubj_agg_both <- bind_rows(subj_agg, subj_agg2)\n\npanel.hist <- function(x, ...) {\n  usr <- par(\"usr\")\n  par(usr = c(usr[1:2], 0, 1.5))\n  h <- hist(x, plot = FALSE)\n  breaks <- h$breaks\n  nB <- length(breaks)\n  y <- h$counts\n  y <- y / max(y)\n  rect(breaks[-nB], 0, breaks[-1], y, col = \"cyan\", ...)\n}\n```\n:::\n\n\n\n## Fit separate models for each experiment\n\nFirst, create a function that takes population parameters, calls estimated_model for each subject with prior set to the population parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nestimate_hmodel <- function(start = c(\n                              prop_mu = 0.4, prop_sd = 0.1,\n                              prop_ltm_mu = 0.6, prop_ltm_sd = 0.1,\n                              rate_mu = 0.15, rate_sd = 0.05,\n                              gain_mu = 7, gain_sd = 1.5,\n                              tau_mu = 0.2, tau_sd = 0.05\n                            ),\n                            split_data,\n                            by = c(\"chunk\", \"gap\"),\n                            return_deviance_only = TRUE) {\n  N <- length(split_data)\n  print(start)\n\n  est_lists <- map(split_data, \\(x) {\n    estimate_model(\n      start = paper_params(),\n      data = x,\n      exclude_sp1 = TRUE,\n      two_step = TRUE,\n      priors = list(\n        prop = list(mean = start[\"prop_mu\"], sd = start[\"prop_sd\"]),\n        prop_ltm = list(mean = start[\"prop_ltm_mu\"], sd = start[\"prop_ltm_sd\"]),\n        rate = list(mean = start[\"rate_mu\"], sd = start[\"rate_sd\"]),\n        gain = list(mean = start[\"gain_mu\"], sd = start[\"gain_sd\"]),\n        tau = list(mean = start[\"tau_mu\"], sd = start[\"tau_sd\"])\n      ),\n      simplify = TRUE\n    )\n  })\n  est <- bind_rows(est_lists)\n  if (return_deviance_only) {\n    dev <- sum(est$deviance)\n    cat(paste0(\"\\nDeviance:\", dev, \"\\n------------------\\n\"))\n    return(dev)\n  }\n  est\n}\n\nestimate_hyperparameters <- function(hyper_start, data) {\n  constrain_pars <- function(par) {\n    mu_vars <- c(\"prop_mu\", \"prop_ltm_mu\", \"tau_mu\", \"rate_mu\", \"gain_mu\")\n    sd_vars <- c(\"prop_sd\", \"prop_ltm_sd\", \"tau_sd\", \"rate_sd\", \"gain_sd\")\n    par[mu_vars] <- inv_logit(par[mu_vars], lb = 0, ub = c(1, 1, 1, 1, 100))\n    par[sd_vars] <- exp(par[sd_vars])\n    par\n  }\n\n  unconstrain_pars <- function(par) {\n    mu_vars <- c(\"prop_mu\", \"prop_ltm_mu\", \"tau_mu\", \"rate_mu\", \"gain_mu\")\n    sd_vars <- c(\"prop_sd\", \"prop_ltm_sd\", \"tau_sd\", \"rate_sd\", \"gain_sd\")\n    par[mu_vars] <- logit(par[mu_vars], lb = 0, ub = c(1, 1, 1, 1, 100))\n    par[sd_vars] <- log(par[sd_vars])\n    par\n  }\n\n  hyper_start <- unconstrain_pars(hyper_start)\n  split_data <- split(data, data$id)\n\n  fit <- optim(\n    par = hyper_start,\n    fn = function(par, ...) {\n      par <- constrain_pars(par)\n      estimate_hmodel(par, ...)\n    },\n    split_data = split_data,\n    control = list(maxit = 1e6)\n  )\n\n  fit$par <- constrain_pars(fit$par)\n  fit$ranef <- estimate_hmodel(fit$par, split_data, return_deviance_only = FALSE)\n  fit\n}\n\n\nhyperstart <- c(\n  prop_mu = 0.4, prop_sd = 0.1,\n  prop_ltm_mu = 0.6, prop_ltm_sd = 0.1,\n  rate_mu = 0.1, rate_sd = 0.05,\n  gain_mu = 7, gain_sd = 1.5,\n  tau_mu = 0.2, tau_sd = 0.05\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# hest <- estimate_hyperparameters(hyperstart, subj_agg_both)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# split_data <- split(subj_agg, subj_agg$id)\n# esth <- estimate_hmodel(return_deviance_only = FALSE)\n# esth\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# hest$ranef[, 1:5] |> pairs(diag.panel = panel.hist)\n```\n:::\n\n\npredictions \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}